{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","components/Resultado.js","components/NumberInput.js","helpers/operaciones.js","components/Calculadora.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Resultado","operacion","calculo","NumberInput","useState","numero1","numero2","numeros","setNumero","handleChange","e","target","name","value","parseFloat","suma","resta","multi","divi","operaciones","className","onChange","type","Calculadora","App","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.86d2578f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import PropTypes from 'prop-types'\r\n\r\nconst Resultado = ({ operacion , calculo}) => {\r\n    return (\r\n        <>\r\n            <br/>\r\n            <span>{ operacion } : { calculo }</span>\r\n        </>\r\n    )\r\n}\r\n\r\nResultado.propTypes = {\r\n    operacion : PropTypes.string,\r\n    calculo : PropTypes.number\r\n}\r\n\r\nexport default Resultado","import { useState } from 'react'\r\nimport { operaciones } from '../helpers/operaciones'\r\nimport Resultado from './Resultado'\r\n\r\nconst NumberInput = () => {\r\n\r\n    const [numeros, setNumero] = useState({\r\n        numero1 : 20,\r\n        numero2 : 10\r\n    })\r\n    const { handleChange, suma, resta, multi, divi, numero1, numero2 } = operaciones(numeros, setNumero)\r\n\r\n    return (\r\n        <>\r\n            <label className='mx-2'>\r\n                numero 1 : <input name='numero1' value={ numero1 } onChange={ handleChange } type='number' />\r\n            </label>\r\n            <label className='mx-2'>\r\n                numero 2 : <input name='numero2' value={ numero2 } onChange={ handleChange } type='number' />\r\n            </label>\r\n\r\n            <br/>\r\n            <Resultado operacion={ 'Suma' } calculo = { suma } />\r\n            <Resultado operacion={ 'Resta' } calculo = { resta } />\r\n            <Resultado operacion={ 'Multiplicacion' } calculo = { multi } />\r\n            <Resultado operacion={ 'Division' } calculo = { divi } />\r\n        </>\r\n    )\r\n}\r\n\r\n// NumberInput.propTypes = {\r\n//     name : PropTypes.string\r\n// }\r\n\r\nexport default NumberInput","export const operaciones = (numeros, setNumero) => {\r\n    let { numero1, numero2 } = numeros\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target\r\n        setNumero( {\r\n            ...numeros,\r\n            [ name ] : parseFloat( value ?? 0 )\r\n        })\r\n    }\r\n    numero1 = numero1 ?? 0\r\n    numero2 = numero2 ?? 0\r\n    console.log(numero2)\r\n    \r\n    const suma = numero1 + numero2\r\n    const resta = numero1 - numero2\r\n    const multi = numero1 * numero2\r\n    const divi = numero1 / numero2\r\n\r\n    return { handleChange, suma, resta, multi, divi, numero1, numero2 }\r\n}","import NumberInput from './NumberInput'\r\n\r\nconst Calculadora = () => {\r\n    return (\r\n        <div>\r\n            <NumberInput />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculadora","import React from 'react'\nimport Calculadora from './components/Calculadora'\n\nconst App = () => {\n  return (\n    <div className='container text-center'>\n      <h1>Calculadora - PWA</h1>\n      <Calculadora />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}